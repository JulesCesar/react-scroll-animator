!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.library=t():e.library=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";e.exports=n(1)},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,u=o?Symbol.for("react.portal"):60106,c=o?Symbol.for("react.fragment"):60107,a=o?Symbol.for("react.strict_mode"):60108,f=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,s=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,y=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,u,c){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var a=[n,r,o,i,u,c],f=0;(e=Error(t.replace(/%s/g,function(){return a[f++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},O={};function S(e,t,n){this.props=e,this.context=t,this.refs=O,this.updater=n||g}function j(){}function _(e,t,n){this.props=e,this.context=t,this.refs=O,this.updater=n||g}S.prototype.isReactComponent={},S.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},S.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},j.prototype=S.prototype;var w=_.prototype=new j;w.constructor=_,r(w,S.prototype),w.isPureReactComponent=!0;var P={current:null},x={current:null},E=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r=void 0,o={},u=null,c=null;if(null!=t)for(r in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(u=""+t.key),t)E.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var a=arguments.length-2;if(1===a)o.children=n;else if(1<a){for(var f=Array(a),l=0;l<a;l++)f[l]=arguments[l+2];o.children=f}if(e&&e.defaultProps)for(r in a=e.defaultProps)void 0===o[r]&&(o[r]=a[r]);return{$$typeof:i,type:e,key:u,ref:c,props:o,_owner:x.current}}function M(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var I=/\/+/g,$=[];function R(e,t,n,r){if($.length){var o=$.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>$.length&&$.push(e)}function z(e,t,n){return null==e?0:function e(t,n,r,o){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var a=!1;if(null===t)a=!0;else switch(c){case"string":case"number":a=!0;break;case"object":switch(t.$$typeof){case i:case u:a=!0}}if(a)return r(o,t,""===n?"."+T(t,0):n),1;if(a=0,n=""===n?".":n+":",Array.isArray(t))for(var f=0;f<t.length;f++){var l=n+T(c=t[f],f);a+=e(c,l,r,o)}else if(l=null===t||"object"!=typeof t?null:"function"==typeof(l=v&&t[v]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),f=0;!(c=t.next()).done;)a+=e(c=c.value,l=n+T(c,f++),r,o);else"object"===c&&b("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return a}(e,"",t,n)}function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function V(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?Q(e,r,n,function(e){return e}):null!=e&&(M(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),r.push(e))}function Q(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(I,"$&/")+"/"),z(e,L,t=R(t,i,r,o)),A(t)}function U(){var e=P.current;return null===e&&b("321"),e}var q={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return Q(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;z(e,V,t=R(null,null,t,n)),A(t)},count:function(e){return z(e,function(){return null},null)},toArray:function(e){var t=[];return Q(e,t,null,function(e){return e}),t},only:function(e){return M(e)||b("143"),e}},createRef:function(){return{current:null}},Component:S,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:c,StrictMode:a,Suspense:d,createElement:k,cloneElement:function(e,t,n){null==e&&b("267",e);var o=void 0,u=r({},e.props),c=e.key,a=e.ref,f=e._owner;if(null!=t){void 0!==t.ref&&(a=t.ref,f=x.current),void 0!==t.key&&(c=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)E.call(t,o)&&!C.hasOwnProperty(o)&&(u[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))u.children=n;else if(1<o){l=Array(o);for(var s=0;s<o;s++)l[s]=arguments[s+2];u.children=l}return{$$typeof:i,type:e.type,key:c,ref:a,props:u,_owner:f}},createFactory:function(e){var t=k.bind(null,e);return t.type=e,t},isValidElement:M,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:f,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:P,ReactCurrentOwner:x,assign:r}},F={default:q},N=F&&q||F;e.exports=N.default||N},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,c=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),a=1;a<arguments.length;a++){for(var f in n=Object(arguments[a]))o.call(n,f)&&(c[f]=n[f]);if(r){u=r(n);for(var l=0;l<u.length;l++)i.call(n,u[l])&&(c[u[l]]=n[u[l]])}}return c}},function(e,t,n){"use strict";n.r(t);var r,o=n(0),i=n.n(o),u=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(){return(c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={offset:0,scroll:0},t.handleScroll=function(e){t.setState({scroll:e.srcElement.body?e.srcElement.body.scrollTop:e.srcElement.scrollTop})},t}return u(t,e),t.prototype.addScrollListener=function(e){e&&e.onscroll!=this.handleScroll&&(e.onscroll=this.handleScroll,this.setState({offset:e.getBoundingClientRect().top,scroll:e.scrollTop}))},t.prototype.componentWillMount=function(){this.props.elementScroll||document.addEventListener("scroll",this.handleScroll)},t.prototype.componentWillUnmount=function(){this.props.elementScroll||document.removeEventListener("scroll",this.handleScroll)},t.prototype.render=function(){var e=this,t=this.props,n=t.children,r=t.elementScroll,o=a(t,["children","elementScroll"]);return r?i.a.createElement("div",c({},o,{style:{height:"100%",overflow:"auto",position:"relative"},ref:function(t){return e.addScrollListener(t)}}),n(this.state.scroll,this.state.offset)):n(this.state.scroll,this.state.offset)},t}(o.Component),l=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),s=Object(o.createContext)({getSection:function(){},pageOffset:0}),p=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.largestSectionValues={},t.getSection=function(e){return t.normalizedSections.find(function(t){return t.name==e})},t}return l(t,e),t.prototype.normalizeSection=function(e,t,n){var r=Object.keys(e)[0],o=e[r],i="number"==typeof o[0]?o[0]:"number"==typeof o?o:document.body.clientHeight,u=o[1]||0,c=i-u;return"offset"in e&&(t+=e.offset),{section:{name:r,index:n,offset:t,range:{start:i,end:u,delta:c}},offset:t+c}},t.prototype.normalizeParallelSections=function(e,t,n){var r=this,o=e.reduce(function(e,n){var o=r.normalizeSections(n,t),i=Math.max(o.range,e.range),u=e.sections;return o.sections.forEach(function(e){for(var t=0;t<u.length;t++)if(e.offset<u[t].offset)return void u.splice(t,0,e);u.push(e)}),{sections:u,range:i}},{sections:[],range:0});return o.sections.forEach(function(e,t){e.index=t+n}),o},t.prototype.normalizeSections=function(e,t){var n=this;return void 0===t&&(t=0),e.reduce(function(e,t){if(t instanceof Array){var r=n.normalizeParallelSections(t,e.range,e.sections.length);return{sections:e.sections.concat(r.sections),range:r.range}}var o=n.normalizeSection(t,e.range,e.sections.length);return e.sections.push(o.section),{sections:e.sections,range:o.offset}},{sections:[],range:t})},t.prototype.getSectionValues=function(e){var t={};this.normalizedSections.forEach(function(n){return t[n.name]=Math.min(1,Math.max(0,e-n.offset)/n.range.delta)});var n=this.largestSectionValues;return Object.keys(t).forEach(function(e){n[e]=Math.max(n[e]||0,t[e])}),t},t.prototype.renderContent=function(e){var t=this.getSectionValues(e);return i.a.createElement(s.Provider,{value:{getSection:this.getSection,pageOffset:this.pageOffset}},i.a.createElement("div",{style:{height:this.range+document.body.clientHeight,width:"100%",display:"inline-block"}},this.props.children(t,this.largestSectionValues,e/this.range)))},t.prototype.render=function(){var e=this,t=this.normalizeSections(this.props.sections),n=t.sections,r=t.range;return this.normalizedSections=n,this.range=r,null==this.props.progress?i.a.createElement(f,{elementScroll:this.props.elementScroll},function(t,n){return e.pageOffset=n,e.renderContent(t)}):this.renderContent(this.props.progress*this.range||0)},t}(o.Component);function y(e,t){var n=e.reduce(function(e,t){return e+(1==t?1:0)},0);return n==e.length&&n--,t[n]}var d={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return e*(2-e)},easeInOutQuad:function(e){return e<.5?2*e*e:(4-2*e)*e-1},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return--e*e*e+1},easeInOutCubic:function(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return 1- --e*e*e*e},easeInOutQuart:function(e){return e<.5?8*e*e*e*e:1-8*--e*e*e*e},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return 1+--e*e*e*e*e},easeInOutQuint:function(e){return e<.5?16*e*e*e*e*e:1+16*--e*e*e*e*e},easeInElastic:function(e){return 0==e?0:(.04-.04/e)*Math.sin(25*e)+1},easeOutElastic:function(e){return 1==e?1:.04*e/--e*Math.sin(25*e)},easeInOutElastic:function(e){return 0==e?0:1==e?1:(e-=.5)<0?(.02+.01/e)*Math.sin(50*e):(.02-.01/e)*Math.sin(50*e)+1},easeInSin:function(e){return 1+Math.sin(Math.PI/2*e-Math.PI/2)},easeOutSin:function(e){return Math.sin(Math.PI/2*e)},easeInOutSin:function(e){return(1+Math.sin(Math.PI*e-Math.PI/2))/2}};function h(e,t,n,r){"number"!=typeof n&&(r=n,n=t,t=0),r||(r={}),r.easing&&(e=d[r.easing](e));var o=e*(n-t)+t;if(void 0!==r.digits){var i=Math.pow(10,r.digits);o=Math.round(o*i)/i}return o}var m=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),v=function(){return(v=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},b=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},g=function(e,t){e.element=t;var n=t.getBoundingClientRect();e.x=n.left,e.y=n.top,e.width=n.width,e.height=n.height,e.shape={width:e.width,height:e.height}},O=function(e){var t=function(n){var r=n.children,o=b(n,["children"]);return i.a.createElement("div",v({},o,{style:v({display:"inline-block"},o.style),ref:function(e){t.element||(g(t,e),t.refresh())}}),r instanceof Function?r(e):r)};return t.x=0,t.y=0,t.width=0,t.height=0,t.shape={width:0,height:0},t.update=function(){return t.element&&g(t,t.element)},t.refresh=e,t},S=function(e){function t(t){for(var n=e.call(this,t)||this,r=[],o=function(){return n.setState({refs:r.map(function(e){return e})})},i=0;i<(t.count||1);i++)r.push(O(o));return n.state={refs:r},n}return m(t,e),t.prototype.render=function(){var e=this.props.children,t=this.state.refs;return t.forEach(function(e){e.update()}),e(t)},t}(o.Component),j=function(){return(j=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},_=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},w=function(e){var t=e.sections,n=e.children,r=_(e,["sections","children"]);return i.a.createElement(s.Consumer,null,function(e){var o=Object.keys(t).reduce(function(n,r){var o=e.getSection(r),i=t[r];return(0!=n.per&&0!=i?o.index>n.section.index:o.index<n.section.index)?{section:o,per:i}:n},{section:{index:1/0},per:0}),u=o.section,c=o.per,a=u.range.start+u.offset,f=u.range.start+e.pageOffset,l=u.range.end+e.pageOffset;return i.a.createElement("div",j({},r,{style:j(c<1&&c>0?{position:"absolute",top:a}:{position:"fixed",top:0==c?f:l},r.style)}),n)})};n.d(t,"AnimationContext",function(){return s}),n.d(t,"Animator",function(){return p}),n.d(t,"latest",function(){return y}),n.d(t,"map",function(){return h}),n.d(t,"createRef",function(){return O}),n.d(t,"RefCreator",function(){return S}),n.d(t,"Pin",function(){return w})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,